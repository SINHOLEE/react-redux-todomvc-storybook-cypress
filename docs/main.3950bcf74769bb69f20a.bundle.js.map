{"version":3,"file":"main.3950bcf74769bb69f20a.bundle.js","sources":["webpack:///./src/stories/addons/store.js"],"sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport {action} from '@storybook/addon-actions';\nimport {Provider} from 'react-redux';\n\nfunction createMockStore(initialState) {\n  let state = initialState;\n  const listeners = [];\n\n  return {\n    dispatch(actionObj) {\n      action(actionObj.type)(actionObj);\n    },\n    getState() {\n      return state;\n    },\n    setState(newState) {\n      state = newState;\n      if (listeners.length) {\n        listeners.forEach(listener => listener(state));\n      }\n    },\n    subscribe(fn) {\n      listeners.push(fn);\n      return () => {\n        const index = listeners.indexOf(fn);\n        if (index) {\n          listeners.splice(index, 1);\n        }\n      };\n    }\n  };\n}\n\nlet store = createMockStore({});\nlet lastStoryInfo = {kind: '', story: ''};\n\nfunction isSameStory(s1, s2) {\n  return s1.kind === s2.kind && s1.story === s2.story;\n}\n\nexport function withStore(storyFn, context) {\n  let state = context.parameters.state || {};\n  if (typeof state === 'function') {\n    state = state();\n  }\n\n  const storyInfo = _.pick(context, ['kind', 'story']);\n  if (isSameStory(lastStoryInfo, context)) {\n    store.setState(state);\n  } else {\n    store = createMockStore(state);\n  }\n\n  lastStoryInfo = storyInfo;\n\n  return <Provider store={store}>{storyFn()}</Provider>;\n}\n"],"mappings":"AAKA","sourceRoot":""}